// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ListCollectionsData, ListCollectionsResponse, ListHotCollectionsData, ListHotCollectionsResponse, ListTrendingReposData, ListTrendingReposResponse, CollectionRepoRankingByIssuesData, CollectionRepoRankingByIssuesResponse, CollectionRepoRankingByPrsData, CollectionRepoRankingByPrsResponse, CollectionRepoRankingByStarsData, CollectionRepoRankingByStarsResponse, ListReposOfCollectionData, ListReposOfCollectionResponse, ListIssueCreatorsData, ListIssueCreatorsResponse, ListPullRequestCreatorsData, ListPullRequestCreatorsResponse, ListCountriesOfIssueCreatorsData, ListCountriesOfIssueCreatorsResponse, IssueCreatorsHistoryData, IssueCreatorsHistoryResponse, ListOrganizationsOfIssueCreatorsData, ListOrganizationsOfIssueCreatorsResponse, ListCountriesOfStargazersData, ListCountriesOfStargazersResponse, StargazersHistoryData, StargazersHistoryResponse, ListOrganizationsOfStargazersData, ListOrganizationsOfStargazersResponse, ListCountriesOfPrCreatorsData, ListCountriesOfPrCreatorsResponse, PullRequestCreatorsHistoryData, PullRequestCreatorsHistoryResponse, ListOrganizationsOfPrCreatorsData, ListOrganizationsOfPrCreatorsResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

/**
 * List collections
 * List collections.
 */
export const listCollections = <ThrowOnError extends boolean = false>(options?: Options<ListCollectionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCollectionsResponse, unknown, ThrowOnError>({
        url: '/collections/',
        ...options
    });
};

/**
 * List hot collections
 * List hot collections with top repositories of the collection.
 */
export const listHotCollections = <ThrowOnError extends boolean = false>(options?: Options<ListHotCollectionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListHotCollectionsResponse, unknown, ThrowOnError>({
        url: '/collections/hot/',
        ...options
    });
};

/**
 * List trending repos
 * Trending repos is an open source alternative to GitHub trends, which showcases recently popular open source projects in the GitHub community.
 *
 * > **Note**
 * >
 * > Please URI encode the requested parameters, e.g. `C++` needs to be encoded as `C%2B%2B`.
 *
 * ☁️ Daily run on [TiDB Cloud](https://tidbcloud.com/?utm_source=ossinsight&utm_medium=ossinsight_api), analyze upon dataset that has over 6 billion GitHub events.
 */
export const listTrendingRepos = <ThrowOnError extends boolean = false>(options?: Options<ListTrendingReposData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTrendingReposResponse, unknown, ThrowOnError>({
        url: '/trends/repos/',
        ...options
    });
};

/**
 * Repository ranking by issues
 * Rank the GitHub repositories in the specified collection according to the number of issues.
 */
export const collectionRepoRankingByIssues = <ThrowOnError extends boolean = false>(options: Options<CollectionRepoRankingByIssuesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CollectionRepoRankingByIssuesResponse, unknown, ThrowOnError>({
        url: '/collections/{collection_id}/ranking_by_issues/',
        ...options
    });
};

/**
 * Repository ranking by prs
 * Rank the GitHub repositories in the specified collection according to the number of pull requests.
 */
export const collectionRepoRankingByPrs = <ThrowOnError extends boolean = false>(options: Options<CollectionRepoRankingByPrsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CollectionRepoRankingByPrsResponse, unknown, ThrowOnError>({
        url: '/collections/{collection_id}/ranking_by_prs/',
        ...options
    });
};

/**
 * Repository ranking by stars
 * Rank the GitHub repositories in the specified collection according to the number of stars.
 */
export const collectionRepoRankingByStars = <ThrowOnError extends boolean = false>(options: Options<CollectionRepoRankingByStarsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CollectionRepoRankingByStarsResponse, unknown, ThrowOnError>({
        url: '/collections/{collection_id}/ranking_by_stars/',
        ...options
    });
};

/**
 * List collection repositories
 * List the repositories of collection.
 */
export const listReposOfCollection = <ThrowOnError extends boolean = false>(options: Options<ListReposOfCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListReposOfCollectionResponse, unknown, ThrowOnError>({
        url: '/collections/{collection_id}/repos/',
        ...options
    });
};

/**
 * List issue creators
 * Querying the issue creators for a given repository.
 */
export const listIssueCreators = <ThrowOnError extends boolean = false>(options: Options<ListIssueCreatorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListIssueCreatorsResponse, unknown, ThrowOnError>({
        url: '/repos/{owner}/{repo}/issue_creators/',
        ...options
    });
};

/**
 * List pull request creators
 * Querying the pull request creators list in a given repository.
 *
 * This API provides multiple ways to sort the query results, for example:
 *
 * - `sort=prs-desc` (Default): Sorted in descending order based on `prs` field (the number of PRs they have contributed), meaning that the contributor with the most PRs is at the top.
 * - `sort=first_pr_merged_at-desc`: Sorted in descending order based on `first_pr_merged_at` field (the time of their first merged PR), which means you can got a list of new code contributors of the repository.
 *
 */
export const listPullRequestCreators = <ThrowOnError extends boolean = false>(options: Options<ListPullRequestCreatorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListPullRequestCreatorsResponse, unknown, ThrowOnError>({
        url: '/repos/{owner}/{repo}/pull_request_creators/',
        ...options
    });
};

/**
 * List countries/regions of issue creators
 * List countries/regions of stargazers for the specified repository.
 *
 * > **Notice**:
 * > In the overall data, about **3.5%** of GitHub users provided valid country/region information.
 *
 * > **Note**:
 * > By default, the API does not count users without valid country/region information.
 * > If you need to count these users, you can set the `exclude_unknown` parameter to `false`.
 *
 */
export const listCountriesOfIssueCreators = <ThrowOnError extends boolean = false>(options: Options<ListCountriesOfIssueCreatorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCountriesOfIssueCreatorsResponse, unknown, ThrowOnError>({
        url: '/repos/{owner}/{repo}/issue_creators/countries/',
        ...options
    });
};

/**
 * Issue creators history
 * Querying the historical trend of the number of issue creators in a given repository.
 */
export const issueCreatorsHistory = <ThrowOnError extends boolean = false>(options: Options<IssueCreatorsHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueCreatorsHistoryResponse, unknown, ThrowOnError>({
        url: '/repos/{owner}/{repo}/issue_creators/history/',
        ...options
    });
};

/**
 * List organizations of stargazers
 * List organizations of stargazers for the specified repository.
 *
 * > **Notice**:
 * > In the overall data, about **5.62%** of GitHub users provided valid organization information.
 *
 * > **Note**:
 * > By default, the API does not count users without valid organization information.
 * > If you need to count these users, you can set the `exclude_unknown` parameter to `false`.
 *
 */
export const listOrganizationsOfIssueCreators = <ThrowOnError extends boolean = false>(options: Options<ListOrganizationsOfIssueCreatorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListOrganizationsOfIssueCreatorsResponse, unknown, ThrowOnError>({
        url: '/repos/{owner}/{repo}/issue_creators/organizations/',
        ...options
    });
};

/**
 * List countries/regions of stargazers
 * List countries/regions of stargazers for the specified repository.
 *
 * > **Notice**:
 * > In the overall data, about **3.5%** of GitHub users provided valid country/region information.
 *
 * > **Note**:
 * > By default, the API does not count users without valid country/region information.
 * > If you need to count these users, you can set the `exclude_unknown` parameter to `false`.
 *
 */
export const listCountriesOfStargazers = <ThrowOnError extends boolean = false>(options: Options<ListCountriesOfStargazersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCountriesOfStargazersResponse, unknown, ThrowOnError>({
        url: '/repos/{owner}/{repo}/stargazers/countries/',
        ...options
    });
};

/**
 * Stargazers history
 * Querying the historical trend of the number of stargazers in a given repository.
 */
export const stargazersHistory = <ThrowOnError extends boolean = false>(options: Options<StargazersHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StargazersHistoryResponse, unknown, ThrowOnError>({
        url: '/repos/{owner}/{repo}/stargazers/history/',
        ...options
    });
};

/**
 * List organizations of stargazers
 * List organizations of stargazers for the specified repository.
 *
 * > **Notice**:
 * > In the overall data, about **5.62%** of GitHub users provided valid organization information.
 *
 * > **Note**:
 * > By default, the API does not count users without valid organization information.
 * > If you need to count these users, you can set the `exclude_unknown` parameter to `false`.
 *
 */
export const listOrganizationsOfStargazers = <ThrowOnError extends boolean = false>(options: Options<ListOrganizationsOfStargazersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListOrganizationsOfStargazersResponse, unknown, ThrowOnError>({
        url: '/repos/{owner}/{repo}/stargazers/organizations/',
        ...options
    });
};

/**
 * List countries/regions of PR creators
 * List countries/regions of pull request creators for the specified repository.
 *
 * > **Notice**:
 * > In the overall data, about **3.5%** of GitHub users provided valid country/region information.
 *
 * > **Note**:
 * > By default, the API does not count users without valid country/region information.
 * > If you need to count these users, you can set the `exclude_unknown` parameter to `false`.
 *
 */
export const listCountriesOfPrCreators = <ThrowOnError extends boolean = false>(options: Options<ListCountriesOfPrCreatorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCountriesOfPrCreatorsResponse, unknown, ThrowOnError>({
        url: '/repos/{owner}/{repo}/pull_request_creators/countries/',
        ...options
    });
};

/**
 * Pull request creators history
 * Querying the historical trend of the number of pull request creators in a given repository.
 */
export const pullRequestCreatorsHistory = <ThrowOnError extends boolean = false>(options: Options<PullRequestCreatorsHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PullRequestCreatorsHistoryResponse, unknown, ThrowOnError>({
        url: '/repos/{owner}/{repo}/pull_request_creators/history/',
        ...options
    });
};

/**
 * List organizations of PR creators
 * List organizations of pull request creators for the specified repository.
 *
 * > **Notice**:
 * > In the overall data, about **5.62%** of GitHub users has valid organization information.
 *
 * > **Note**:
 * > By default, the API does not count users without valid organization information.
 * > If you need to count these users, you can set the `exclude_unknown` parameter to `false`.
 *
 */
export const listOrganizationsOfPrCreators = <ThrowOnError extends boolean = false>(options: Options<ListOrganizationsOfPrCreatorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListOrganizationsOfPrCreatorsResponse, unknown, ThrowOnError>({
        url: '/repos/{owner}/{repo}/pull_request_creators/organizations/',
        ...options
    });
};