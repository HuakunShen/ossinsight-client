// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { ListCollectionsError, ListCollectionsResponse, ListHotCollectionsError, ListHotCollectionsResponse, ListTrendingReposData, ListTrendingReposError, ListTrendingReposResponse, CollectionRepoRankingByIssuesData, CollectionRepoRankingByIssuesError, CollectionRepoRankingByIssuesResponse, CollectionRepoRankingByPrsData, CollectionRepoRankingByPrsError, CollectionRepoRankingByPrsResponse, CollectionRepoRankingByStarsData, CollectionRepoRankingByStarsError, CollectionRepoRankingByStarsResponse, ListReposOfCollectionData, ListReposOfCollectionError, ListReposOfCollectionResponse, ListIssueCreatorsData, ListIssueCreatorsError, ListIssueCreatorsResponse, ListPullRequestCreatorsData, ListPullRequestCreatorsError, ListPullRequestCreatorsResponse, ListCountriesOfIssueCreatorsData, ListCountriesOfIssueCreatorsError, ListCountriesOfIssueCreatorsResponse, IssueCreatorsHistoryData, IssueCreatorsHistoryError, IssueCreatorsHistoryResponse, ListOrganizationsOfIssueCreatorsData, ListOrganizationsOfIssueCreatorsError, ListOrganizationsOfIssueCreatorsResponse, ListCountriesOfStargazersData, ListCountriesOfStargazersError, ListCountriesOfStargazersResponse, StargazersHistoryData, StargazersHistoryError, StargazersHistoryResponse, ListOrganizationsOfStargazersData, ListOrganizationsOfStargazersError, ListOrganizationsOfStargazersResponse, ListCountriesOfPrCreatorsData, ListCountriesOfPrCreatorsError, ListCountriesOfPrCreatorsResponse, PullRequestCreatorsHistoryData, PullRequestCreatorsHistoryError, PullRequestCreatorsHistoryResponse, ListOrganizationsOfPrCreatorsData, ListOrganizationsOfPrCreatorsError, ListOrganizationsOfPrCreatorsResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * List collections
 * List collections.
 */
export const listCollections = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListCollectionsResponse, ListCollectionsError, ThrowOnError>({
        ...options,
        url: '/collections/'
    });
};

/**
 * List hot collections
 * List hot collections with top repositories of the collection.
 */
export const listHotCollections = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListHotCollectionsResponse, ListHotCollectionsError, ThrowOnError>({
        ...options,
        url: '/collections/hot/'
    });
};

/**
 * List trending repos
 * Trending repos is an open source alternative to GitHub trends, which showcases recently popular open source projects in the GitHub community.
 *
 * > **Note**
 * >
 * > Please URI encode the requested parameters, e.g. `C++` needs to be encoded as `C%2B%2B`.
 *
 * ☁️ Daily run on [TiDB Cloud](https://tidbcloud.com/?utm_source=ossinsight&utm_medium=ossinsight_api), analyze upon dataset that has over 6 billion GitHub events.
 */
export const listTrendingRepos = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListTrendingReposData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListTrendingReposResponse, ListTrendingReposError, ThrowOnError>({
        ...options,
        url: '/trends/repos/'
    });
};

/**
 * Repository ranking by issues
 * Rank the GitHub repositories in the specified collection according to the number of issues.
 */
export const collectionRepoRankingByIssues = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CollectionRepoRankingByIssuesData, ThrowOnError>) => {
    return (options?.client ?? client).get<CollectionRepoRankingByIssuesResponse, CollectionRepoRankingByIssuesError, ThrowOnError>({
        ...options,
        url: '/collections/{collection_id}/ranking_by_issues/'
    });
};

/**
 * Repository ranking by prs
 * Rank the GitHub repositories in the specified collection according to the number of pull requests.
 */
export const collectionRepoRankingByPrs = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CollectionRepoRankingByPrsData, ThrowOnError>) => {
    return (options?.client ?? client).get<CollectionRepoRankingByPrsResponse, CollectionRepoRankingByPrsError, ThrowOnError>({
        ...options,
        url: '/collections/{collection_id}/ranking_by_prs/'
    });
};

/**
 * Repository ranking by stars
 * Rank the GitHub repositories in the specified collection according to the number of stars.
 */
export const collectionRepoRankingByStars = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CollectionRepoRankingByStarsData, ThrowOnError>) => {
    return (options?.client ?? client).get<CollectionRepoRankingByStarsResponse, CollectionRepoRankingByStarsError, ThrowOnError>({
        ...options,
        url: '/collections/{collection_id}/ranking_by_stars/'
    });
};

/**
 * List collection repositories
 * List the repositories of collection.
 */
export const listReposOfCollection = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListReposOfCollectionData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListReposOfCollectionResponse, ListReposOfCollectionError, ThrowOnError>({
        ...options,
        url: '/collections/{collection_id}/repos/'
    });
};

/**
 * List issue creators
 * Querying the issue creators for a given repository.
 */
export const listIssueCreators = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListIssueCreatorsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListIssueCreatorsResponse, ListIssueCreatorsError, ThrowOnError>({
        ...options,
        url: '/repos/{owner}/{repo}/issue_creators/'
    });
};

/**
 * List pull request creators
 * Querying the pull request creators list in a given repository.
 *
 * This API provides multiple ways to sort the query results, for example:
 *
 * - `sort=prs-desc` (Default): Sorted in descending order based on `prs` field (the number of PRs they have contributed), meaning that the contributor with the most PRs is at the top.
 * - `sort=first_pr_merged_at-desc`: Sorted in descending order based on `first_pr_merged_at` field (the time of their first merged PR), which means you can got a list of new code contributors of the repository.
 *
 */
export const listPullRequestCreators = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListPullRequestCreatorsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListPullRequestCreatorsResponse, ListPullRequestCreatorsError, ThrowOnError>({
        ...options,
        url: '/repos/{owner}/{repo}/pull_request_creators/'
    });
};

/**
 * List countries/regions of issue creators
 * List countries/regions of stargazers for the specified repository.
 *
 * > **Notice**:
 * > In the overall data, about **3.5%** of GitHub users provided valid country/region information.
 *
 * > **Note**:
 * > By default, the API does not count users without valid country/region information.
 * > If you need to count these users, you can set the `exclude_unknown` parameter to `false`.
 *
 */
export const listCountriesOfIssueCreators = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListCountriesOfIssueCreatorsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListCountriesOfIssueCreatorsResponse, ListCountriesOfIssueCreatorsError, ThrowOnError>({
        ...options,
        url: '/repos/{owner}/{repo}/issue_creators/countries/'
    });
};

/**
 * Issue creators history
 * Querying the historical trend of the number of issue creators in a given repository.
 */
export const issueCreatorsHistory = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<IssueCreatorsHistoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<IssueCreatorsHistoryResponse, IssueCreatorsHistoryError, ThrowOnError>({
        ...options,
        url: '/repos/{owner}/{repo}/issue_creators/history/'
    });
};

/**
 * List organizations of stargazers
 * List organizations of stargazers for the specified repository.
 *
 * > **Notice**:
 * > In the overall data, about **5.62%** of GitHub users provided valid organization information.
 *
 * > **Note**:
 * > By default, the API does not count users without valid organization information.
 * > If you need to count these users, you can set the `exclude_unknown` parameter to `false`.
 *
 */
export const listOrganizationsOfIssueCreators = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListOrganizationsOfIssueCreatorsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListOrganizationsOfIssueCreatorsResponse, ListOrganizationsOfIssueCreatorsError, ThrowOnError>({
        ...options,
        url: '/repos/{owner}/{repo}/issue_creators/organizations/'
    });
};

/**
 * List countries/regions of stargazers
 * List countries/regions of stargazers for the specified repository.
 *
 * > **Notice**:
 * > In the overall data, about **3.5%** of GitHub users provided valid country/region information.
 *
 * > **Note**:
 * > By default, the API does not count users without valid country/region information.
 * > If you need to count these users, you can set the `exclude_unknown` parameter to `false`.
 *
 */
export const listCountriesOfStargazers = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListCountriesOfStargazersData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListCountriesOfStargazersResponse, ListCountriesOfStargazersError, ThrowOnError>({
        ...options,
        url: '/repos/{owner}/{repo}/stargazers/countries/'
    });
};

/**
 * Stargazers history
 * Querying the historical trend of the number of stargazers in a given repository.
 */
export const stargazersHistory = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<StargazersHistoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<StargazersHistoryResponse, StargazersHistoryError, ThrowOnError>({
        ...options,
        url: '/repos/{owner}/{repo}/stargazers/history/'
    });
};

/**
 * List organizations of stargazers
 * List organizations of stargazers for the specified repository.
 *
 * > **Notice**:
 * > In the overall data, about **5.62%** of GitHub users provided valid organization information.
 *
 * > **Note**:
 * > By default, the API does not count users without valid organization information.
 * > If you need to count these users, you can set the `exclude_unknown` parameter to `false`.
 *
 */
export const listOrganizationsOfStargazers = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListOrganizationsOfStargazersData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListOrganizationsOfStargazersResponse, ListOrganizationsOfStargazersError, ThrowOnError>({
        ...options,
        url: '/repos/{owner}/{repo}/stargazers/organizations/'
    });
};

/**
 * List countries/regions of PR creators
 * List countries/regions of pull request creators for the specified repository.
 *
 * > **Notice**:
 * > In the overall data, about **3.5%** of GitHub users provided valid country/region information.
 *
 * > **Note**:
 * > By default, the API does not count users without valid country/region information.
 * > If you need to count these users, you can set the `exclude_unknown` parameter to `false`.
 *
 */
export const listCountriesOfPrCreators = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListCountriesOfPrCreatorsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListCountriesOfPrCreatorsResponse, ListCountriesOfPrCreatorsError, ThrowOnError>({
        ...options,
        url: '/repos/{owner}/{repo}/pull_request_creators/countries/'
    });
};

/**
 * Pull request creators history
 * Querying the historical trend of the number of pull request creators in a given repository.
 */
export const pullRequestCreatorsHistory = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PullRequestCreatorsHistoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<PullRequestCreatorsHistoryResponse, PullRequestCreatorsHistoryError, ThrowOnError>({
        ...options,
        url: '/repos/{owner}/{repo}/pull_request_creators/history/'
    });
};

/**
 * List organizations of PR creators
 * List organizations of pull request creators for the specified repository.
 *
 * > **Notice**:
 * > In the overall data, about **5.62%** of GitHub users has valid organization information.
 *
 * > **Note**:
 * > By default, the API does not count users without valid organization information.
 * > If you need to count these users, you can set the `exclude_unknown` parameter to `false`.
 *
 */
export const listOrganizationsOfPrCreators = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListOrganizationsOfPrCreatorsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListOrganizationsOfPrCreatorsResponse, ListOrganizationsOfPrCreatorsError, ThrowOnError>({
        ...options,
        url: '/repos/{owner}/{repo}/pull_request_creators/organizations/'
    });
};