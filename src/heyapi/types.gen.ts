// This file is auto-generated by @hey-api/openapi-ts

export type ListCollectionsResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * Repository ID
             */
            repo_id?: string;
            /**
             * Repository name
             */
            repo_name?: string;
            [key: string]: unknown | string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type ListCollectionsError = unknown;

export type ListHotCollectionsResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * Collection ID
             */
            id?: string;
            /**
             * Collection name
             */
            name?: string;
            /**
             * The number of repositories in the collection
             */
            repos?: string;
            /**
             * Repository ID
             */
            repo_id?: string;
            /**
             * Repository name
             */
            repo_name?: string;
            /**
             * The rank of the repository in the collection in the current period
             */
            repo_current_period_rank?: string;
            /**
             * The rank of the repository in the collection in the past period
             */
            repo_past_period_rank?: string;
            /**
             * The rank changes of the repository in the collection
             */
            repo_rank_changes?: string;
            [key: string]: unknown | string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type ListHotCollectionsError = unknown;

export type ListTrendingReposData = {
    query?: {
        /**
         * Specify using which programming language to filter trending repos. If not specified, all languages will be included.
         */
        language?: 'All' | 'JavaScript' | 'Java' | 'Python' | 'PHP' | 'C++' | 'C#' | 'TypeScript' | 'Shell' | 'C' | 'Ruby' | 'Rust' | 'Go' | 'Kotlin' | 'HCL' | 'PowerShell' | 'CMake' | 'Groovy' | 'PLpgSQL' | 'TSQL' | 'Dart' | 'Swift' | 'HTML' | 'CSS' | 'Elixir' | 'Haskell' | 'Solidity' | 'Assembly' | 'R' | 'Scala' | 'Julia' | 'Lua' | 'Clojure' | 'Erlang' | 'Common Lisp' | 'Emacs Lisp' | 'OCaml' | 'MATLAB' | 'Objective-C' | 'Perl' | 'Fortran';
        /**
         * Specify the period of time to calculate trending repos.
         */
        period?: 'past_24_hours' | 'past_week' | 'past_month' | 'past_3_months';
    };
};

export type ListTrendingReposResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * ID of the repo
             */
            repo_id?: string;
            /**
             * Name of the repo
             */
            repo_name?: string;
            /**
             * Primary programing language used by the repo
             */
            primary_language?: string;
            /**
             * Description of the repo
             */
            description?: string;
            /**
             * Number of stars in the period
             */
            stars?: string;
            /**
             * Number of forks in the period
             */
            forks?: string;
            /**
             * Number of pull requests in the period
             */
            pull_requests?: string;
            /**
             * Number of pushes in the period
             */
            pushes?: string;
            /**
             * Total score of the repo
             */
            total_score?: string;
            /**
             * Comma separated list of active contributor logins
             */
            contributor_logins?: string;
            /**
             * Comma separated list of collection names
             */
            collection_names?: string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type ListTrendingReposError = unknown;

export type CollectionRepoRankingByIssuesData = {
    path: {
        /**
         * The ID of collection
         */
        collection_id: number;
    };
    query?: {
        /**
         * The period of the range.
         */
        period?: 'past_28_days' | 'past_month';
    };
};

export type CollectionRepoRankingByIssuesResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * The repository ID
             */
            repo_id?: string;
            /**
             * The repository name
             */
            repo_name?: string;
            /**
             * issues growth in the current period (past 28 days / current month)
             */
            current_period_growth?: string;
            /**
             * issues growth in the past period (The 28 days before the past 28 days / past month)
             */
            past_period_growth?: string;
            /**
             * The period-over-period growth of issues
             */
            growth_pop?: string;
            /**
             * The period-over-period rank changes of issues
             */
            rank_pop?: string;
            /**
             * The current total issues of repository
             */
            total?: string;
            [key: string]: unknown | string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type CollectionRepoRankingByIssuesError = unknown;

export type CollectionRepoRankingByPrsData = {
    path: {
        /**
         * The ID of collection
         */
        collection_id: number;
    };
    query?: {
        /**
         * The period of the range.
         */
        period?: 'past_28_days' | 'past_month';
    };
};

export type CollectionRepoRankingByPrsResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * The repository ID
             */
            repo_id?: string;
            /**
             * The repository name
             */
            repo_name?: string;
            /**
             * prs growth in the current period (past 28 days / current month)
             */
            current_period_growth?: string;
            /**
             * prs growth in the past period (The 28 days before the past 28 days / past month)
             */
            past_period_growth?: string;
            /**
             * The period-over-period growth of prs
             */
            growth_pop?: string;
            /**
             * The period-over-period rank changes of prs
             */
            rank_pop?: string;
            /**
             * The current total prs of repository
             */
            total?: string;
            [key: string]: unknown | string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type CollectionRepoRankingByPrsError = unknown;

export type CollectionRepoRankingByStarsData = {
    path: {
        /**
         * The ID of collection
         */
        collection_id: number;
    };
    query?: {
        /**
         * The period of the range.
         */
        period?: 'past_28_days' | 'past_month';
    };
};

export type CollectionRepoRankingByStarsResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * The repository ID
             */
            repo_id?: string;
            /**
             * The repository name
             */
            repo_name?: string;
            /**
             * Stars growth in the current period (past 28 days / current month)
             */
            current_period_growth?: string;
            /**
             * Stars growth in the past period (The 28 days before the past 28 days / past month)
             */
            past_period_growth?: string;
            /**
             * The period-over-period growth of stars
             */
            growth_pop?: string;
            /**
             * The period-over-period rank changes of stars
             */
            rank_pop?: string;
            /**
             * The current total stars of repository
             */
            total?: string;
            [key: string]: unknown | string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type CollectionRepoRankingByStarsError = unknown;

export type ListReposOfCollectionData = {
    path: {
        /**
         * The ID of collection
         */
        collection_id: number;
    };
};

export type ListReposOfCollectionResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * Repository ID
             */
            repo_id?: string;
            /**
             * Repository name
             */
            repo_name?: string;
            [key: string]: unknown | string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type ListReposOfCollectionError = unknown;

export type ListIssueCreatorsData = {
    path: {
        /**
         * The owner of the repo.
         */
        owner: string;
        /**
         * The name of the repo.
         */
        repo: string;
    };
    query?: {
        /**
         * Whether to exclude robot accounts (includes GitHub App and normal users whose username matches the pattern, for example: `ti-chi-bot`).
         */
        exclude_bots?: boolean;
        /**
         * Page number of the results to fetch.
         */
        page?: number;
        /**
         * The number of results per page (max 100).
         */
        page_size?: number;
        /**
         * Specify the field by which to sort the issue creators list (values with a `-desc` suffix indicate descending sorting)
         */
        sort?: 'issues' | 'issues-desc' | 'first_issue_opened_at' | 'first_issue_opened_at-desc' | 'login';
    };
};

export type ListIssueCreatorsResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * The ID of the issue creator
             */
            id?: string;
            /**
             * The login (username) of the issue creator
             */
            login?: string;
            /**
             * The name of the issue creator
             */
            name?: string;
            /**
             * The number of issues created by the issue creator
             */
            issues?: string;
            /**
             * The date of the first issue created by the issue creator
             */
            first_issue_opened_at?: string;
            [key: string]: unknown | string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type ListIssueCreatorsError = unknown;

export type ListPullRequestCreatorsData = {
    path: {
        /**
         * The owner of the repo.
         */
        owner: string;
        /**
         * The name of the repo.
         */
        repo: string;
    };
    query?: {
        /**
         * Whether to exclude robot accounts (includes GitHub App and normal users whose username matches the pattern, for example: `ti-chi-bot`).
         */
        exclude_bots?: boolean;
        /**
         * Page number of the results to fetch.
         */
        page?: number;
        /**
         * The number of results per page (max 100).
         */
        page_size?: number;
        /**
         * Specify the field by which to sort the pull request creators list (values with a `-desc` suffix indicate descending sorting)
         */
        sort?: 'login' | 'prs' | 'prs-desc' | 'first_pr_opened_at' | 'first_pr_opened_at-desc' | 'first_pr_merged_at' | 'first_pr_merged_at-desc';
    };
};

export type ListPullRequestCreatorsResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * The ID of the pull request creator
             */
            id?: string;
            /**
             * The login (username) of the pull request creator
             */
            login?: string;
            /**
             * The name of the pull request creator
             */
            name?: string;
            /**
             * The number of pull requests created by the pull request creator
             */
            prs?: string;
            /**
             * The date of the first pull request created by the pull request creator
             */
            first_pr_opened_at?: string;
            /**
             * The date of the first merged pull request be merged into the repository
             */
            first_pr_merged_at?: string;
            [key: string]: unknown | string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type ListPullRequestCreatorsError = unknown;

export type ListCountriesOfIssueCreatorsData = {
    path: {
        /**
         * The owner of the repo.
         */
        owner: string;
        /**
         * The name of the repo.
         */
        repo: string;
    };
    query?: {
        /**
         * Whether to exclude issue creators with unknown country/region information
         */
        exclude_unknown?: boolean;
        /**
         * The start date of the range.
         */
        from?: string;
        /**
         * The end date of the range.
         */
        to?: string;
    };
};

export type ListCountriesOfIssueCreatorsResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * Country/region code
             */
            country_code?: string;
            /**
             * Number of issue creators from the country/region
             */
            issue_creators?: string;
            /**
             * Percentage of issue creators from the country/region
             */
            percentage?: string;
            [key: string]: unknown | string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type ListCountriesOfIssueCreatorsError = unknown;

export type IssueCreatorsHistoryData = {
    path: {
        /**
         * The owner of the repo.
         */
        owner: string;
        /**
         * The name of the repo.
         */
        repo: string;
    };
    query?: {
        /**
         * The start date of the time range.
         */
        from?: string;
        /**
         * The time interval of the data points.
         */
        per?: 'day' | 'week' | 'month';
        /**
         * The end date of the time range.
         */
        to?: string;
    };
};

export type IssueCreatorsHistoryResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * The date of the data point
             */
            date?: string;
            /**
             * The number of issue creators on the date point
             */
            issue_creators?: string;
            [key: string]: unknown | string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type IssueCreatorsHistoryError = unknown;

export type ListOrganizationsOfIssueCreatorsData = {
    path: {
        /**
         * The owner of the repo.
         */
        owner: string;
        /**
         * The name of the repo.
         */
        repo: string;
    };
    query?: {
        /**
         * Whether to exclude issue creators with unknown organization information
         */
        exclude_unknown?: boolean;
        /**
         * The start date of the range.
         */
        from?: string;
        /**
         * The end date of the range.
         */
        to?: string;
    };
};

export type ListOrganizationsOfIssueCreatorsResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * Number of issue creators from the organization
             */
            issue_creators?: string;
            /**
             * Name of the organization
             */
            org_name?: string;
            /**
             * Percentage of issue creators from the organization
             */
            percentage?: string;
            [key: string]: unknown | string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type ListOrganizationsOfIssueCreatorsError = unknown;

export type ListCountriesOfStargazersData = {
    path: {
        /**
         * The owner of the repo.
         */
        owner: string;
        /**
         * The name of the repo.
         */
        repo: string;
    };
    query?: {
        /**
         * Whether to exclude issue creators with unknown country/region information
         */
        exclude_unknown?: boolean;
        /**
         * The start date of the range.
         */
        from?: string;
        /**
         * The end date of the range.
         */
        to?: string;
    };
};

export type ListCountriesOfStargazersResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * Country/region code
             */
            country_code?: string;
            /**
             * Number of stargazers from the country/region
             */
            stargazers?: string;
            /**
             * Percentage of stargazers from the country/region
             */
            percentage?: string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type ListCountriesOfStargazersError = unknown;

export type StargazersHistoryData = {
    path: {
        /**
         * The owner of the repo.
         */
        owner: string;
        /**
         * The name of the repo.
         */
        repo: string;
    };
    query?: {
        /**
         * The start date of the time range.
         */
        from?: string;
        /**
         * The time interval of the data points.
         */
        per?: 'day' | 'week' | 'month';
        /**
         * The end date of the time range.
         */
        to?: string;
    };
};

export type StargazersHistoryResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * The date of the data point
             */
            date?: string;
            /**
             * The cumulative number of stargazers
             */
            stargazers?: string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type StargazersHistoryError = unknown;

export type ListOrganizationsOfStargazersData = {
    path: {
        /**
         * The owner of the repo.
         */
        owner: string;
        /**
         * The name of the repo.
         */
        repo: string;
    };
    query?: {
        /**
         * Whether to exclude stargazers with unknown organization information
         */
        exclude_unknown?: boolean;
        /**
         * The start date of the range.
         */
        from?: string;
        /**
         * The end date of the range.
         */
        to?: string;
    };
};

export type ListOrganizationsOfStargazersResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * Name of the organization
             */
            org_name?: string;
            /**
             * Percentage of stargazers from the organization
             */
            percentage?: string;
            /**
             * Number of stargazers from the organization
             */
            stargazers?: string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type ListOrganizationsOfStargazersError = unknown;

export type ListCountriesOfPrCreatorsData = {
    path: {
        /**
         * The owner of the repo.
         */
        owner: string;
        /**
         * The name of the repo.
         */
        repo: string;
    };
    query?: {
        /**
         * Whether to exclude issue creators with unknown country/region information
         */
        exclude_unknown?: boolean;
        /**
         * The start date of the range.
         */
        from?: string;
        /**
         * The end date of the range.
         */
        to?: string;
    };
};

export type ListCountriesOfPrCreatorsResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * Country/region code
             */
            country_code?: string;
            /**
             * Percentage of pull request creators from the country/region
             */
            percentage?: string;
            /**
             * Number of pull request creators from the country/region
             */
            pull_request_creators?: string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type ListCountriesOfPrCreatorsError = unknown;

export type PullRequestCreatorsHistoryData = {
    path: {
        /**
         * The owner of the repo.
         */
        owner: string;
        /**
         * The name of the repo.
         */
        repo: string;
    };
    query?: {
        /**
         * The start date of the time range.
         */
        from?: string;
        /**
         * The time interval of the data points.
         */
        per?: 'day' | 'week' | 'month';
        /**
         * The end date of the time range.
         */
        to?: string;
    };
};

export type PullRequestCreatorsHistoryResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * The date of the data point
             */
            date?: string;
            /**
             * The cumulative number of pull request creators
             */
            pull_request_creators?: string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type PullRequestCreatorsHistoryError = unknown;

export type ListOrganizationsOfPrCreatorsData = {
    path: {
        /**
         * The owner of the repo.
         */
        owner: string;
        /**
         * The name of the repo.
         */
        repo: string;
    };
    query?: {
        /**
         * Whether to exclude PR creators with unknown organization information
         */
        exclude_unknown?: boolean;
        /**
         * The start date of the range.
         */
        from?: string;
        /**
         * The end date of the range.
         */
        to?: string;
    };
};

export type ListOrganizationsOfPrCreatorsResponse = ({
    /**
     * The type of the endpoint.
     */
    type: 'sql_endpoint';
    data: {
        columns: Array<{
            /**
             * The name of the column in the query result.
             */
            col: string;
            /**
             * The data type of the column.
             */
            data_type: 'CHAR' | 'BIGINT' | 'DECIMAL' | 'INT' | 'UNSIGNED BIGINT' | 'TINYINT' | 'TIMESTAMP' | 'TEXT' | 'VARCHAR' | 'DATETIME' | 'DOUBLE' | 'FLOAT' | 'DATE' | 'TIME' | 'YEAR' | 'MEDIUMINT' | 'SMALLINT' | 'BIT' | 'BINARY' | 'VARBINARY' | 'JSON' | 'ENUM' | 'SET' | 'TINYTEXT' | 'MEDIUMTEXT' | 'LONGTEXT' | 'TINYBLOB' | 'MEDIUMBLOB' | 'BLOB' | 'LONGBLOB';
            /**
             * Whether the column is nullable.
             */
            nullable: boolean;
            [key: string]: unknown | string | boolean;
        }>;
        rows: Array<{
            /**
             * Name of the organization
             */
            org_name?: string;
            /**
             * Percentage of pull request creators from the organization
             */
            percentage?: string;
            /**
             * Number of pull request creators from the organization
             */
            pull_request_creators?: string;
        }>;
        result: {
            /**
             * The code of the response.
             */
            code?: number;
            /**
             * The message of the response.
             */
            message?: string;
            /**
             * The start time of the query in milliseconds.
             */
            start_ms?: number;
            /**
             * The end time of the query in milliseconds.
             */
            end_ms?: number;
            /**
             * The latency of the query.
             */
            latency?: string;
            /**
             * The number of rows in the query result.
             */
            row_count?: number;
            /**
             * The number of rows affected by the query.
             */
            row_affect?: number;
            /**
             * The maximum number of rows in the query result.
             */
            limit?: number;
            /**
             * The databases used in the query.
             */
            databases?: Array<(string)>;
            [key: string]: unknown | number | string;
        };
    };
});

export type ListOrganizationsOfPrCreatorsError = unknown;